;; Copyright 2019, 2020, 2021 Matthew Egan Odendahl
;; SPDX-License-Identifier: Apache-2.0
"Hissp's basic macros.

The basic macros are just enough to test and demonstrate Hissp's macro
system; they are not intended to be a standard library for general use,
but may suffice for small projects.

As a convenience, they are automatically made available unqualified in
the Lissp REPL, but this does not apply to modules. (A Hissp module with
better alternatives need not use the basic macros at all.) In modules,
either use the fully-qualified names, or start with the `prelude` macro.

You can abbreviate qualifiers with the `alias` macro:

.. code-block:: Lissp

  (hissp.basic.._macro_.alias b/ hissp.basic.._macro_.)
  ;; Now the same as (hissp.basic.._macro_.define foo 2).
  (b/#define foo 2)

The basic macros are deliberately restricted in design.

They have NO DEPENDENCIES in their expansions; they use only the
standard library with no extra helper functions. This means that all
helper code must be inlined, resulting in larger expansions than might
otherwise be necessary. But because macros expand before runtime, the
compiled code does not require Hissp to be installed to work.

They also have no prerequisite initialization, beyond what is available
in a standard Python module. For example, a ``_macro_`` namespace need
not be available for ``defmacro``. It's smart enough to check for the
presence of ``_macro_`` in its expansion context, and inline the
initialization code when required.

With the exception of ``prelude`` (which uses `exec`), they also eschew
any expansions to Python code, relying only on the built-in special
forms ``quote`` and ``lambda``, which makes their expansions compatible
with advanced rewriting macros that process the Hissp expansions of
other macros.

To help keep macro definitions and expansions manageable in complexity,
these basic macros lack some of the extra features their equivalents
have in Python or in other Lisps.
"

_#" This module is not necessarily a good example of how you should
write Lissp or Lissp macros. Besides the design restrictions mentioned
in the module docstring above, the macros defined here were not
available at the start, so some had to be bootstrapped without the
benefit of a complete macro suite.

These macros don't create compiled dependencies on Hissp, but that
doesn't mean you can't depend on your own code. Hissp's qualified
symbols, and Lissp's template syntax that automatically creates them,
are there to make helper functions easy to use in macroexpansions. Use
them.

However, the restriction on text-substitution is still recommended. Many
useful advanced macros must process the expansion of other macros, but
they require syntax trees to work on. Text hides that structure. If you
want to go that route, you might as well use `ast` and ``exec()` and
forget about Hissp. Nevertheless, text substitution is available, and
judicious use can improve performance and maintainability.
"

;;;; Bootstrap Macros

;; Bootstrap macro namespace using builtins.
(operator..setitem (globals) '_macro_ (types..ModuleType '_macro_))

;; Bootstrap enough macros to define the 'defmacro' macro. Dawg.

;; Simplified bootstrap version assumes ideal conditions to avoid branching.
(setattr _macro_
         'defmacro
         (lambda (name parameters docstring : :* body)
           `((lambda (: $#G (lambda ,parameters ,@body))
               (setattr $#G ','__doc__ ,docstring)
               (setattr $#G ','__qualname__ (.join "." '(,'_macro_ ,name)))
               (setattr _macro_ ',name $#G)))))

(defmacro if-else (test then otherwise)
  "``if-else`` Basic ternary branching construct.

  Like Python's conditional expressions, the 'else' clause is required.
  "
  `((lambda (,'test : :* ,'then-else)
      ((operator..getitem ,'then-else (operator..not_ ,'test))))
    ,test
    (lambda : ,then)
    (lambda : ,otherwise)))

(defmacro progn (: :* body)
  "Evaluates each body expression in sequence (for side effects),
  resulting in the value of the last (or ``()`` if empty).
  "
  ;; TODO: consider flattening nested progns
  `((lambda :
      ,@body)))

(defmacro when (condition : :* body)
  "When the condition is true,
  evaluates each expression in sequence for side effects,
  resulting in the value of the last.
  Otherwise, skips them and returns ``()``.
  "
  `(if-else ,condition (progn ,@body) ()))

(defmacro unless (condition : :* body)
  "Unless the condition is true,
  evaluates each expression in sequence for side effects,
  resulting in the value of the last.
  Otherwise, skips them and returns ``()``.
  "
  `(if-else ,condition () (progn ,@body)))

(defmacro let (pairs : :* body)
  "Creates local variables. Pairs are implied. Locals are not in scope until the body."
  `((lambda (: ,@pairs)
      ,@body)))

;;;; Post-bootstrap

;;; definition

;; Define the real defmacro using the bootstrap macros.
(defmacro defmacro (name parameters : docstring () :* body)
  "Creates a new macro for the current module.

  If there's no ``_macro_``, creates one (using `types.ModuleType`).
  If there's a docstring, stores it as the new lambda's ``__doc__``.
  Adds the ``_macro_`` prefix to the lambda's ``__qualname__``.
  Saves the lambda in ``_macro_`` using the given attribute name.
  "
  (let ($fn `$#fn)
    (let (fn `(lambda ,parameters ,docstring ,@body)
          ns (unless (operator..contains (.get hissp.compiler..NS) '_macro_)
               `((operator..setitem (globals) ','_macro_ (types..ModuleType ','_macro_))))
          dc (when (hissp.reader..is_string docstring)
               `((setattr ,$fn ','__doc__ ,docstring)))
          qn `(setattr ,$fn ','__qualname__ (.join "." '(,'_macro_ ,name))))
      `(let (,$fn ,fn)
         ,@ns
         ,@dc
         ,qn
         (setattr (operator..getitem (builtins..globals)
                                     ','_macro_)
                  ',name
                  ,$fn)))))

(defmacro define (name value)
  "Assigns a global the value in the current module."
  `(operator..setitem (builtins..globals)
                      ',name
                      ,value))

(defmacro deftype (name bases : :* body)
  "Defines a type (class) in the current module.

  Key-value pairs are implied in the body.
  "
  `(define ,name
       (type ',name (,hissp.reader..ENTUPLE ,@bases)
             (dict : ,@body))))

;; see also from bootstrap: let

(define _TAO "
Nothingness above abstraction
  but implementation is / the best name.
Terseness may make one too many / get used to them
  else overflow your brain.
No substitute for understanding
Code;     the liability
as asset; the   ability.
The biggest chunks / are hard to swallow
  as simple as possible / no more.
Source was made / for the human
  object / the machine.
Are you lazy enough to bear / the sincerest form / of other ways of being?
*having* decent standards / is more important / than exactly what they are
Perfection / is expensive
  magic / highly priced
  pay for when / it's Worth It
  a quarter is advised
Readability / is mainly / laid out on the page.
Golfing / makes good practice / best practice it betrays.
Castles built / in the air / whither they do belong?
  Elegance / then exception
  Form / before detail
  whence under them,
Foundations appear.
Make the right way obvious,
meditate on this.
  --Za Zen of Hissp
")

(defmacro import (: :* args)
  `(print _TAO))

;;; configuration

(defmacro attach (target : :* args)
  "Attaches the named variables to the target as attributes.

  Positional arguments must be unqualified identifiers,
  and use that as the attribute name.
  Names after the ``:`` are identifier-value pairs.
  Returns the target.
  "
  (let (iargs (iter args)
        $target `$#target)
    (let (args (itertools..takewhile (lambda (a)
                                       (operator..ne a ':))
                                     iargs))
      `(let (,$target ,target)
         ,@(map (lambda (arg)
                  `(setattr ,$target ',arg ,arg))
                args)
         ,@(map (lambda (kw)
                  `(setattr ,$target ',kw ,(next iargs)))
                iargs)
         ,$target))))

(defmacro cascade (self : :* invocations)
  "Call multiple 'methods' on one 'self'.

  Evaluates the given ``self``, then injects it as the first argument to
  a sequence of invocations. Returns the result of the last one.
  "
  (let ($self `$#self)
    `((lambda (: ,$self ,self)
        ,@(map (lambda (invocation)
                 `(,(operator..getitem invocation 0)
                   ,$self
                   ,@(operator..getitem invocation (slice 1 None))))
               invocations)))))

;;; threading

(defmacro -> (expr : :* forms)
  "``->`` 'Thread-first'.

  Converts a pipeline to function calls by recursively threading
  expressions as the first argument of the next form.
  E.g. ``(-> x (A b) (C d e))`` is ``(C (A x b) d e)``
  Makes chained method calls easier to read.
  "
  (if-else forms
    `(-> (,(operator..getitem (operator..getitem forms 0) 0)
          ,expr
          ,@(operator..getitem (operator..getitem forms 0)
                               (slice 1 None)))
         ,@(operator..getitem forms (slice 1 None)))
    expr))

(defmacro ->> (expr : :* forms)
  "``->>`` 'Thread-last'.

  Converts a pipeline to function calls by recursively threading
  expressions as the last argument of the next form.
  E.g. ``(->> x (A b) (C d e))`` is ``(C d e (A b x))``.
  Can replace partial application in some cases.
  Also works inside a ``->`` pipeline.
  E.g. ``(-> x (A a) (->> B b) (C c))`` is ``(C (B b (A x a)) c)``.
  "
  (if-else forms
    `(->> (,@(operator..getitem forms 0) ,expr)
          ,@(operator..getitem forms (slice 1 None)))
    expr))

;; TODO: implement other arrange macros?

;;; control flow

(defmacro cond (: :* pairs)
  #"Multiple condition branching.

  Pairs are implied. Default is ``()``. Use ``:else`` to change it.
  For example::

   (cond)  ; ()
   ;; Assume some number 'x
   (cond (operator..gt x 0) (print \"positive\")
         (operator..lt x 0) (print \"negative\")
         (operator..eq x 0) (print \"zero\")
         :else (print \"not a number\"))
  "
  (when pairs
    `(if-else ,(operator..getitem pairs 0)
              ,(operator..getitem pairs 1)
              ;; Here's the recursive part.
              (cond ,@(operator..getitem pairs (slice 2 None))))))

(defmacro any-for (variable iterable : :* body)
  "``any-for``
  Bind the variable and evaluate the body for each item from the
  iterable until any result is true (and return ``True``),
  or until the iterable is exhausted (and return ``False``).
  "
  `(any (map (lambda (,variable)
               ,@body)
             ,iterable)))

;; I would have named this 'and, but that's a reserved word.
(defmacro && (: :* exprs)
  "``&&`` 'and'. Shortcutting logical AND.
  Returns the first false value, otherwise the last value.
  There is an implicit initial value of ``True``.
  "
  (cond (operator..not_ exprs) True
        (operator..eq (len exprs) 1) (operator..getitem exprs 0)
        :else `(let ($#G ,(operator..getitem exprs 0))
                 (if-else $#G
                          (&& ,@(operator..getitem exprs (slice 1 None)))
                          $#G))))

(defmacro || (: first () :* rest)
  "``||`` 'or'. Shortcutting logical OR.
  Returns the first true value, otherwise the last value.
  There is an implicit initial value of ``()``.
  "
  (if-else rest
           `(let ($#first ,first)
              (if-else $#first
                       $#first
                       (|| ,@rest)))
           first))

;; TODO: implement case macro?

;; see also from bootstrap: if-else, when, unless

;;; side effect

(defmacro prog1 (expr1 : :* body)
  "Evaluates each expression in sequence (for side effects),
  resulting in the value of the first."
  `(let ($#value1 ,expr1)
     ,@body
     $#value1))

;; see also from bootstrap: progn

;; Note that any of the basic macros with a lambda "body" argument
;; also sequence expressions for side effects.

;;; reader

(defmacro b\# (raw)
  "``b#`` bytes literal reader macro"
  (-> raw
      (.replace "'" "\'")
      (.replace #"\n" "\n")
      (->> (.format "b'{}'"))
      (ast..literal_eval)))

;;; import

(defmacro prelude ()
  "Grants unqualified access to the basics.

  Star imports from `operator` and `itertools`.
  And adds the basic macros, but only if available,
  so its expansion does not require Hissp to be installed.
  (This replaces ``_macro_`` if you already had one.)
  "
  `(exec #"\
from operator import *
from itertools import *
try:
    from hissp.basic import _macro_
    _macro_ = __import__('types').SimpleNamespace(**vars(_macro_))
except ModuleNotFoundError:
    pass"))

(defmacro alias (alias module)
  "Defines a reader macro abbreviation of a symbol prefix
  (such as a qualifier). For example,

  .. code-block:: Lissp

     (hissp.basic.._macro_.alias b/ hissp.basic.._macro_.)
     ;; Now the same as (hissp.basic.._macro_.define foo 2).
     (b/#define foo 2)
  "
  `(defmacro ,(.format "{}{}" alias '#)
             ($#G)
     ',(.format "Aliases {} as {}#" module alias)
     (.format "{}{}" ',module $#G)))
