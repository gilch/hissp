;; Copyright 2019, 2020 Matthew Egan Odendahl
;; SPDX-License-Identifier: Apache-2.0
" Hissp's basic macros.

These are automatically made available as unqualified macros in the
basic REPL. To use them in a Hissp module, use the ``prelude`` macro or
fully-qualified names. You can abbreviate qualifiers with reader macros:

.. code-block:: Lissp

  (hissp.basic.._macro_.alias b/ hissp.basic.._macro_.)
  ;; Now the same as (hissp.basic.._macro_.define foo 2).
  (b/#define foo 2)

The basic macros are deliberately restricted in design.

They have NO DEPENDENCIES in their expansions;
they use only the standard library with no extra helper functions.
This means that the compiled code does not require Hissp to be installed
to work, but all helper code must be inlined, resulting in larger
expansions than might otherwise be necessary.

They also have no prerequisite initialization, beyond what is available
in a standard Python module. Their Python compilation would work
directly in an ``exec()``. For example, a ``_macro_`` namespace need not
be available for ``defmacro``. It's smart enough to check for the
presence of ``_macro_`` in its expanson context, and inline the
initialization code when required.

With the exception of ``prelude`` (which is only meant for the top
level), they also eschew text substitutions, relying only on the
built-in special forms ``quote`` and ``lambda``, which makes their
expansions compatible with advanced rewriting macros that process the
expansions of other macros.

To help keep macros and their expansions manageable in size, these basic
macros lack some of the advanced bells and whistles that their
equivalents have in Python or other Lisps.
"

_#" This module is not necessarily a good example of how you should
write Lissp or Lissp macros. Besides the design restrictions mentioned
in the module docstring above, the macros defined here were not
available at the start, so some had to be bootstrapped without the
benefit of a complete macro suite.

These macros don't create compiled dependencies on Hissp, but that
doesn't mean you can't depend on your own code. Hissp's qualified
symbols, and Lissp's template syntax that automatically creates them,
are there to make helper functions easy to use in macroexpansions. Use
them.

However, the restriction on text-substitution is still recommended. Many
useful advanced macros must process the expansion of other macros, but
they require syntax trees to work on. Text hides that structure. If you
want to go that route, you might as well use `ast` and ``exec()` and
forget about Hissp. Nevertheless, text substitution is available, and
judicious use can improve performance and maintainability.
"

;;;; Bootstrap Macros

;; Bootstrap macro namespace using builtins.
(operator..setitem (globals) '_macro_ (types..ModuleType '_macro_))

;; Bootstrap enough macros to define the 'defmacro' macro. Dawg.

;; Simplified bootstrap version assumes ideal conditions to avoid branching.
(setattr _macro_
         'defmacro
         (lambda (name parameters docstring : :* body)
           `((lambda (: $#G (lambda ,parameters ,@body))
               (setattr $#G ','__doc__ ,docstring)
               (setattr $#G ','__qualname__ (.join "." '(,'_macro_ ,name)))
               (setattr _macro_ ',name $#G)))))

(defmacro if-else (test then otherwise)
  "``if-else`` Basic ternary branching construct.

  Like Python's conditional expressions, the 'else' clause is required.
  "
  `((lambda (,'test : :* ,'then-else)
      ((operator..getitem ,'then-else (operator..not_ ,'test))))
    ,test
    (lambda () ,then)
    (lambda () ,otherwise)))

(defmacro progn (: :* body)
  "Evaluates each form in sequence for side effects.

  Evaluates to the same value as its last form (or ``()`` if empty).
  "
  ;; TODO: consider flattening nested progns
  `((lambda ()
      ,@body)))

(defmacro when (condition : :* body)
  "Evaluates the body when condition is true."
  `(if-else ,condition (progn ,@body) ()))

(defmacro unless (condition : :* body)
  "Evaluates the body unless condition is true."
  `(if-else ,condition () (progn ,@body)))

(defmacro let (pairs : :* body)
  "Creates locals. Pairs are implied. Locals are not in scope until the body."
  `((lambda (: ,@pairs)
      ,@body)))

;;;; Post-bootstrap

;;; definition

;; Define the real defmacro using the bootstrap macros.
(defmacro defmacro (name parameters : docstring () :* body)
  "Creates a new macro for the current module.

  If there's no _macro_, creates one (using ModuleType).
  If there's a docstring, stores it as the new lambda's __doc__.
  Adds the _macro_ prefix to the lambda's qualname.
  Saves the lambda in _macro_ using the given attribute name.
  "
  (let ($fn `$#fn)
    (let (fn `(lambda ,parameters ,docstring ,@body)
          ns (unless (operator..contains (.get hissp.compiler..NS) '_macro_)
               `((operator..setitem (globals) ','_macro_ (types..ModuleType ','_macro_))))
          dc (when (hissp.reader..is_string docstring)
               `((setattr ,$fn ','__doc__ ,docstring)))
          qn `(setattr ,$fn ','__qualname__ (.join "." '(,'_macro_ ,name))))
      `(let (,$fn ,fn)
         ,@ns
         ,@dc
         ,qn
         (setattr ,'_macro_ ',name ,$fn)))))

(defmacro define (name value)
  "Assigns a global in the current module."
  `(operator..setitem (builtins..globals)
                      ',name
                      ,value))

(defmacro deftype (name bases : :* body)
  "Defines a type (class) in the current module.

  Key-value pairs are implied in the body.
  "
  `(define ,name
       (type ',name ((lambda (: :* xAUTO0_) xAUTO0_) ,@bases)
             (dict : ,@body))))

;; see also from bootstrap: let

;;; configuration

(defmacro attach (target : :* args)
  "Attaches the named variables as attributes of the target.

  Positional arguments use the same name as the variable.
  Names after the ``:`` are key-value pairs.
  "
  (let (iargs (iter args)
              $target `$#target)
    (let (args (itertools..takewhile (lambda (a)
                                       (operator..ne a ':))
                                     iargs))
      `(let (,$target ,target)
         ,@(map (lambda (arg)
                  `(setattr ,$target ',arg ,arg))
                args)
         ,@(map (lambda (kw)
                  `(setattr ,$target ',kw ,(next iargs)))
                iargs)
         ,$target))))

(defmacro cascade (thing : :* calls)
  "Call multiple methods on one object.

  Evaluates the given thing then uses it as the first argument to a
  sequence of calls. Used for initialization. Evaluates to the thing.
  "
  (let ($thing `$#thing)
    `((lambda (: ,$thing ,thing)
        ,@(map (lambda (call)
                 `(,(car call)
                   ,$thing
                   ,@(cdr call)))
               calls)
        ,$thing))))

;;; threading

(defmacro -> ())
(defmacro -> (expr : :* forms)
  "``->`` 'Thread-first'.

  Converts a pipeline to function calls by recursively threading it as
  the first argument of the next form.
  E.g. ``(-> x (A b) (C d e))`` is ``(C (A x b) d e)``
  Makes chained method calls easier to read.
  "
  (if-else forms
    `(-> (,(caar forms) ,expr ,@(cdar forms))
         ,@(cdr forms))
    expr))

(defmacro ->> ())
(defmacro ->> (expr : :* forms)
  "``->>`` 'Thread-last'.

  Converts a pipeline to function calls by recursively threading it as
  the last argument of the next form.
  E.g. ``(->> x (A b) (C d e))`` is ``(C d e (A b x))``.
  Can replace partial application in some cases.
  Also works inside a ``->`` pipeline.
  E.g. ``(-> x (A a) (->> B b) (C c))`` is ``(C (B b (A x a)) c)``.
  "
  (if-else forms
    `(->> (,@(car forms) ,expr)
          ,@(cdr forms))
    expr))

;; TODO: implement other arrange macros?

;;; linked-list emulation

_#" Hissp is based on tuples rather than linked lists,
but many macros still require this kind of recursive list processing.
"

(defmacro car (sequence)
  "The first item of a sequence."
  `(operator..getitem ,sequence 0))

(defmacro cdr (sequence)
  "Slice of the sequence without the first item."
  `(operator..getitem ,sequence (slice 1 None)))

(defmacro caar (xss)
  "The first item of the first item. Short for ``(car (car xss))``."
  `(car (car ,xss)))

(defmacro cdar (xss)
  "The slice of the first item without its first item.

  Short for ``(cdr (car xss))``.
  "
  `(cdr (car ,xss)))

(defmacro cadr (sequence)
  "The second item of a sequence.

  Like ``(car (cdr sequence))``, but more efficient.
  "
  `(operator..getitem ,sequence 1))

(defmacro cddr (sequence)
  "Slice of the sequence without the first two items.

  Like ``(cdr (cdr sequence))``, but more efficient.
  "
  `(operator..getitem ,sequence (slice 2 None)))

;;; control flow

_#"``cond`` is recursive.

Recall that templates are read syntax, which evaluate before
macroexpansion. Without the forward declaration creating a dummy
``cond`` macro, the reader would automatically qualify ``cond`` as
``hissp.basic..cond`` in the template instead of
``hissp.basic.._macro_.cond``, because it has no way of knowing it's
going to be added to the ``_macro_`` namespace later.

We could have used the qualified symbol ``hissp.basic.._macro_.cond`` in
the template instead of an unqualified ``cond``, then we wouldn't need
the forward declaration.
"
(defmacro cond ())
(defmacro cond (: :* pairs)
  "Multiple condition branching.

  Pairs are implied. Default is (); use :else to change it.
  For example::

   (cond)  ; ()
   ;; Assume some number 'x
   (cond (operator..gt x 0) (print \"positive\")
         (operator..lt x 0) (print \"negative\")
         (operator..eq x 0) (print \"zero\")
         :else (print \"not a number\"))
  "
  (when pairs
    `(if-else ,(car pairs)
              ,(cadr pairs)
              ;; Here's the recursive part.
              (cond ,@(cddr pairs)))))

(defmacro any-for (item iterable : :* body)
  "``any-for`` Evaluate body for each item in iterable until any result is true."
  `(any (map (lambda (,item)
               ,@body)
             ,iterable)))

;; I would have named this 'and, but that's a reserved word.
(defmacro && ())  ; Forward declaration because && is recursive.
(defmacro && (: :* exprs)
  "``&&`` 'and'. Like Python's ``and`` operator, but for any number of arguments."
  (cond (operator..not_ exprs) True
        (operator..eq 1 (len exprs)) (car exprs)
        :else `(let ($#G ,(car exprs))
                 (if-else $#G
                          (&& ,@(cdr exprs))
                          $#G))))

(defmacro || ())  ; Forward declaration because || is recursive.
(defmacro || (: first () :* rest)
  "``||`` 'or'. Like Python's ``or`` operator, but for any number of arguments."
  (if-else rest
           `(let ($#first ,first)
              (if-else $#first
                       $#first
                       (|| ,@rest)))
           first))

;; TODO: implement case macro?

;; see also from bootstrap: if-else, when, unless

;;; side effect

(defmacro prog1 (expr1 : :* body)
  "Evaluates each expression in sequence (for side effects),
  resulting in the value of the first."
  `(let ($#value1 ,expr1)
     ,@body
     $#value1))

;; see also from bootstrap: progn

;; Note that any of the basic macros with a lambda "body" argument
;; also sequence expressions for side effects.

;;; import

(defmacro prelude ()
  "Grants unqualified access to the basics.

  Star imports from operator and itertools.
  And adds the basic macros, if available.
  "
  `(exec "
from operator import *
from itertools import *
try:
    from hissp.basic import _macro_
    _macro_ = __import__('types').SimpleNamespace(**vars(_macro_))
except ModuleNotFoundError:
    pass"))

(defmacro alias (alias module)
  "Defines a reader macro abbreviation of a qualifier."
  `(defmacro ,alias ($#G)
     ',(.format "Aliases {} as {}#" module alias)
     (.format "{}{}" ',module $#G)))
